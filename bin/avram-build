#!/usr/bin/env node
const fs = require('fs')
const args = process.argv.splice(2)
const { Builder } = require('../index')

if (!args.length) {
  console.log(`Usage: avram-build [options] <file|->
Parse a file with MARC or PICA records and create a basic Avram Schema.

Options:
  -v, --verbose    Print additional information to STDERR`)
  process.exit()
}

let verbose = false

function log(msg) {
  if (verbose) console.warn(msg)
}

if (args[0].match(/^-v|--verbose$/)) {
  verbose = args.shift()
}

const file = args[0] || '-'
const input = file === '-' ? process.stdin : fs.createReadStream(file)

log('Parsing ' + (file === '-' ? 'from STDIN' : 'file ' + file))

const build = new Builder()

let stream, format = 'marcxml'

if (file.match(`xml(.gz)?$`)) {

  // MARCXML
  const MARC = require('marcjs')  
  stream = MARC.stream(input, 'marcxml')
} else { 

  // ndjson
  const readline = require('readline')
  const { Transform } = require('stream')

  stream = Transform({
    objectMode: true,
    transform (chunk, encoding, callback) {
      callback(false, chunk)
    }
  })

  readline.createInterface(input)
  .on('line', line => stream.write(JSON.parse(line)))
  .on('close', () => stream.emit('end'))
}


stream
  .on('data', record => { build.add(record) })
  .on('end', () => {
    console.log(JSON.stringify(build.schema(), null, 2))
    log(`Processed ${build.count} records`)
  })
